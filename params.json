{"name":"Net","tagline":"Http Request wrapper written in Swift","body":"Net\r\n=====\r\nNet is a HttpRequest wrapper written in Swift\r\n\r\nFeatures\r\n-----\r\n* GET, POST, PUT, DELETE method\r\n* Powerful request params: nested params, number, string, dic, array, image, data\r\n* Json, Image, Xml Response\r\n* Download file: resume, suspend, cancel\r\n* Upload file, data, params(multi-part)\r\n* Progress closure\r\n* Background donwload, upload\r\n* Authentication\r\n* Batch of operations\r\n* BaseURL\r\n* Customizable header\r\n\r\nDemo app\r\n-----\r\n![screenshot](https://dl.dropboxusercontent.com/u/8556646/screenshot2.png)\r\n\r\nUsage\r\n-----\r\nUse one of the following methods to create a Net instance\r\n\r\n```swift\r\n// without baseURL\r\nlet net = Net()\r\n\r\n// with baseURL\r\nlet net = Net(baseUrlString: \"http://www.puqiz.com/\") \r\n```\r\n\r\n### HttpRequest\r\n\r\n###### `GET` Request\r\n\r\n```swift\r\nlet url = \"get_path\"\r\nlet params = [\"integerNumber\": 1, \"doubleNumber\": 2.0, \"string\": \"hello\"]\r\n\r\nnet.GET(url, params: params, successHandler: { responseData in\r\n\t\tlet result = responseData.json(error: nil)\r\n\t\tNSLog(\"result \\(result)\")\r\n\t}, failureHandler: { error in\r\n\t\tNSLog(\"Error\")\r\n\t})\r\n\r\n// you can also make a request with absolute url\r\nlet url = \"http://www.puqiz.com/get_path\"\r\nnet.GET(absoluteUrl: url, params: params, successHandler: { responseData in\r\n\t\tlet result = responseData.json(error: nil)\r\n\t\tNSLog(\"result \\(result)\")\r\n\t}, failureHandler: { error in\r\n\t\tNSLog(\"Error\")\r\n\t})\r\n```\r\n\r\nYou can also use nested params\r\n\r\n```swift\r\n// nested params\r\nlet params = [\"string\": \"test\",\r\n            \"integerNumber\": 1,\r\n            \"floatNumber\": 1.5,\r\n            \"array\": [10, 20, 30],\r\n            \"dictionary\": [\"x\": 100.0, \"y\": 200.0],\r\n            \"image\": NetData(pngImage: img, filename: \"myIcon\")]\r\n```\r\n\r\nBy using responseData in sucessHandler closure you can quickly\r\n* get json dictionary\r\n* get image\r\n* parse xml\r\n\r\nfor GET, POST, PUT, DELETE request.\r\n\r\n```swift\r\n// get json dictionary from response data\r\nlet jsonDic = responseData.json(error: error)\r\n\r\n// get image from response data\r\nlet image = responseData.image()\r\n\r\n// parse xml with delegate\r\nlet result = responseData.parseXml(delegate: self)\r\n```\r\n\r\n###### `POST` Request\r\nNet will automatically check your params to send request as a URL-Encoded request or a Multi-Part request. So you can easily post with number, string, image or binary data.\r\n\r\n* URL-Encoded Request\r\n\r\n```swift\r\nlet url = \"post_path\"\r\nlet params = [\"string\": \"test\", \"integerNumber\": 1, \"floatNumber\": 1.5]\r\n        \r\nnet.POST(url, params: params, successHandler: { responseData in\r\n\t\tlet result = responseData.json(error: nil)\r\n\t\tNSLog(\"result: \\(result)\")\r\n\t}, failureHandler: { error in\r\n\t\tNSLog(\"Error\")\r\n\t})\r\n```\r\n\r\n* Multi-Part Request\r\n\r\n```swift\r\nlet url = \"post_path\"\r\nlet img = UIImage(named: \"puqiz_icon\")\r\n        \r\nlet params = [\"string\": \"test\", \"integerNumber\": 1,\r\n            \"icon\": NetData(pngImage: img, filename: \"myIcon\")]\r\n        \r\nnet.POST(url, params: params, successHandler: { responseData in\r\n\t\tlet result = responseData.json(error: nil)\r\n\t\tNSLog(\"result: \\(result)\")\r\n\t}, failureHandler: { error in\r\n\t\tNSLog(\"Error\")\r\n\t})\r\n```\r\n\r\n###### `PUT` Request\r\n```swift\r\nlet url = \"put_path\"\r\nlet params = [\"string\": \"test\", \"integerNumber\": 1, \"floatNumber\": 1.5]\r\n        \r\nnet.PUT(url, params: params, successHandler: { responseData in\r\n\t\tlet result = responseData.json(error: nil)\r\n\t\tNSLog(\"result: \\(result)\")\r\n\t}, failureHandler: { error in\r\n\t\tNSLog(\"Error\")\r\n\t})\r\n```\r\n\r\n###### `DELETE` Request\r\n```swift\r\nlet url = \"delete_path\"\r\nlet params = [\"id\": 10]\r\n        \r\nnet.DELETE(url, params: params, successHandler: { responseData in\r\n\t\tNSLog(\"result: \\(result)\")\r\n\t}, failureHandler: { error in\r\n\t\tNSLog(\"Error\")\r\n\t})\r\n```\r\n\r\n### Task\r\nBefore using download/upload function you have to call `setupSession` method to setup the session.\r\n\r\n```swift\r\n// setup session without backgroundIdentifier\r\nnet.setupSession()\r\n```\r\nTo perform background downloads or uploads, you have to call `setupSession` method with a background identifier string. Then your download/upload tasks can be run even when the app is suspended, exits or crashes. \r\n\r\n```swift\r\n// setup session with backgroundIdentifier\r\nnet.setupSession(backgroundIdentifier: \"com.nghialv.download\")\r\n\r\n// you can set eventsForBackgroundHandler closure\r\n// this closure will be invoked when a task is completed in the background\r\nnet.eventsForBackgroundHandler = { urlSession in\r\n\t\turlSession.getDownloadingTasksCount{ downloadingTaskCount in\r\n\t\tif downloadingTaskCount == 0 {\r\n\t\t\tNSLog(\"All files have been downloaded!\")\r\n\t\t}\r\n\t}\r\n}\r\n``` \r\n\r\n###### Download\r\n```swift\r\nlet downloadTask = net.download(absoluteUrl: url, progress: { progress in\r\n\t\tNSLog(\"progress \\(progress)\")\r\n\t}, completionHandler: { fileUrl, error in\r\n\t\tif error != nil {\r\n\t\t\tNSLog(\"Download failed\")\r\n\t\t}\r\n\t\telse {\r\n\t\t\tNSLog(\"Downloaded to  : \\(fileUrl)\")\r\n\t\t}\r\n\t})\r\n\r\n// you can control your task\r\ndownloadTask.resume()\r\ndownloadTask.suspend()\r\ndownloadTask.cancel()\r\n```\r\n\r\n###### Upload\r\n* Upload with file path\r\n\r\n```swift\r\nlet task = net.upload(absoluteUrl: url, fromFile: file, progressHandler: { progress in\r\n\t\tNSLog(\"progress \\(progress)\")\r\n\t}, completionHandler: { error in\r\n\t\tif error != nil {\r\n\t\t\tNSLog(\"Upload failed : \\(error)\")\r\n\t\t}\r\n\t\telse {\r\n\t\t\tNSLog(\"Upload completed\")\r\n\t\t}\r\n\t})\r\n```\r\n\r\n* Upload with data\r\n\r\n```swift\r\nlet yourData = NSData(...)\r\n        \r\nnet.upload(absoluteUrl: url, data: yourData, progressHandler: { progress in\r\n\t\tNSLog(\"progress: \\(progress)\")\r\n\t}, completionHandler: { error in\r\n\t\tNSLog(\"Upload completed\")\r\n\t})\r\n```\r\n\r\n* Upload with params\r\n\r\n```swift\r\nlet image = UIImage(named: \"image_file\")\r\nlet imageData = UIImagePNGRepresentation(image)\r\nlet params = [\"number\": 1, \"string\": \"net\", \"data\": imageData]\r\n\r\nnet.upload(absoluteUrl: imgUrl, params: params, progressHandler: { progress in\r\n\t\tNSLog(\"progress: \\(progress)\")\r\n\t}, completionHandler: { error in\r\n\t\tNSLog(\"Upload completed\")\r\n\t})\r\n```\r\nBy default, the upload task will be performed as POST method and \r\n\r\n* `Content-Type` = `application/octet-stream` (upload with file or data)\r\n* `Content-Type` = `multipart/form-data` (upload with params)\r\n\r\nBut you can configure the upload task before resuming.\r\n\r\n```swift\r\n// set method\r\nyourUploadTask.setHttpMethod(.PUT)\r\n\r\n// set header field\r\nyourUploadTask.setValue(value: \"your_value\", forHttpHeaderField: \"header_field\")\r\n```\r\n\r\n## In progress\r\n* Batch of operations\r\n* Basic authentiacation\r\n\r\n\r\nIntegration\r\n-----\r\nJust drag Net folder to the project tree\r\n","google":"UA-43205514-4","note":"Don't delete this file! It's used internally to help with page regeneration."}